from typing import TYPE_CHECKING
from src.core.agent_base import MultiAgentBase, MessageType
from src.defenses.peer_guard import PeerGuard

if TYPE_CHECKING:
    from src.core.environment import SimulationEnvironment

class TrustExploitationAgent(MultiAgentBase):
    """
    An agent that first builds trust by acting benevolently,
    then launches a backdoor attack once trust is established.
    """
    def __init__(self, name: str, target_agent: str, trust_threshold: float = 0.9):
        super().__init__(name)
        self.target_agent = target_agent
        self.trust_threshold_for_attack = trust_threshold
        self.mode = "build_trust"  # Modes: 'build_trust', 'attack', 'dormant'
        
        # This agent also has its own guard, now with a config
        guard_config = {
            "trust_threshold": 0.5,
            "frequency_window_seconds": 10,
            "frequency_limit_messages": 5
        }
        self.guard = PeerGuard(self, config=guard_config)

    async def act(self, environment: "SimulationEnvironment"):
        # Decide action based on mode
        if self.mode == "build_trust":
            self.log.info(f"Operating in 'build_trust' mode. Sending benign message to {self.target_agent}.")
            await self.send(
                self.target_agent,
                MessageType.QUERY,
                {"type": "benign_info", "content": "Here is some helpful data."}
            )
            
        elif self.mode == "attack":
            self.log.warning(f"Trust threshold met. Switching to 'attack' mode. Attacking {self.target_agent}.")
            await self.send(
                self.target_agent,
                MessageType.BACKDOOR,
                {"payload": "Exploiting trust with a backdoor and backdoor_activation."} # Add dangerous keyword
            )
            self.mode = "dormant"

    def switch_to_attack_mode(self):
        """Manually switch the agent's mode for the simulation."""
        self.log.info("Sufficient trust built. Switching to attack mode.")
        self.mode = "attack"

    # --- Message Handlers ---
    async def on_query(self, message): pass
    async def on_response(self, message): pass
    async def on_backdoor(self, message): pass
    async def on_trigger(self, message): pass
    async def on_heartbeat(self, message): pass
    async def on_broadcast(self, message): pass
