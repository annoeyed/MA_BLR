import sys
import asyncio
from pathlib import Path

sys.path.append(str(Path(__file__).resolve().parents[2]))

from src.core.environment import SimulationEnvironment
from src.attacks.trust_exploitation import TrustExploitationAgent
from src.agents.benign_victim import BenignVictimAgent

async def main():
    print("=== [SCENARIO] Trust Exploitation Attack ===")

    # 1. Create the attacker and the victim
    attacker = TrustExploitationAgent(name="WolfInSheepsClothing", target_agent="Victim")
    victim = BenignVictimAgent(name="Victim")

    agents = [attacker, victim]

    # 2. Setup environment and start agents
    env = SimulationEnvironment(agents)
    for agent in agents:
        await agent.start()

    # 3. Simulation Loop
    print("\n--- Phase 1: Attacker builds trust ---")
    for i in range(4): # Attacker sends benign messages for a few turns
        print(f"\n[Turn {i+1}]")
        await env.step()
        await asyncio.sleep(0.5)
        # We check the victim's trust score for the attacker
        trust_score = victim.guard.get_trust(attacker.name)
        print(f"Victim's trust in Attacker is now: {trust_score:.2f}")

    print("\n--- Phase 2: Attacker exploits trust ---")
    # Manually switch the attacker to attack mode
    attacker.switch_to_attack_mode()
    
    print(f"\n[Turn 5]")
    await env.step()
    await asyncio.sleep(0.5)

    # Final check
    if victim.compromised:
        print("\n[!!!] ATTACK SUCCESSFUL: The victim was compromised.")
    else:
        print("\n[âœ“] ATTACK FAILED: The victim was not compromised.")


    print("\n=== Simulation Complete ===")

if __name__ == "__main__":
    asyncio.run(main())
