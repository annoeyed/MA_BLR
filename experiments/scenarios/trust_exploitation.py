"""
Scenario for Trust Exploitation Attack.
"""
import asyncio
from src.attacks.trust_exploitation import TrustExploitationAgent
from src.detection.anomaly_detector import AnomalyDetector
from src.core.environment import SimulationEnvironment

async def main():
    """
    Sets up and runs the trust exploitation scenario.
    """
    print("--- Running Trust Exploitation Scenario ---")

    # 1. Setup agents
    malicious_agent = TrustExploitationAgent(name="MaliciousAgent", is_malicious=True)
    naive_agent = TrustExploitationAgent(name="NaiveAgent", is_malicious=False)
    agents = [malicious_agent, naive_agent]
    
    detector = AnomalyDetector(name="AnomalyDetector", agents=agents, alert_threshold=0.5)
    all_simulation_agents = agents + [detector]

    # 2. Setup environment
    env = SimulationEnvironment(all_simulation_agents)
    
    # Agents need to be aware of each other to communicate
    await malicious_agent.connect(naive_agent.agent_id)
    await naive_agent.connect(malicious_agent.agent_id)

    # 3. Run simulation
    print("\n--- Simulation Start ---")
    num_steps = 5
    for i in range(num_steps):
        print(f"\n--- Step {i+1}/{num_steps} ---")
        await env.step()
        
        # In the act method, the malicious agent will send a trigger.
        # The environment step will handle the message passing and reactions.
        
        await asyncio.sleep(0.2) # Give time for messages to be processed

    # 4. Final detection phase
    print("\n--- Final Anomaly Detection ---")
    results = await detector.act(env)
    
    print("\n--- Scenario Complete ---")
    return results if results is not None else {}


if __name__ == "__main__":
    asyncio.run(main())
