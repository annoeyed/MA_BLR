# experiments/scenarios/trust_exploitation.py

from src.core.environment import SimulationEnvironment
from src.attacks.trust_exploitation import TrustExploitationAttack
from src.detection.behavior_monitor import BehaviorMonitor
from src.defenses.peer_guard import PeerGuard
from src.utils.visualization import visualize_message_flow


def run_trust_exploitation_scenario():
    print("=== Running Trust Exploitation Scenario ===")
    
    # Initialize environment
    env = SimulationEnvironment()

    # Register agents
    agent_ids = ["ClientA", "ClientB", "ClientC", "Server"]
    for aid in agent_ids:
        env.register_agent(aid)

    # Assign roles
    env.set_roles({
        "ClientA": "malicious",
        "ClientB": "honest",
        "ClientC": "honest",
        "Server": "verifier"
    })

    # Apply trust exploitation attack
    attack = TrustExploitationAttack(env)
    attack.deploy()

    # Run simulation
    env.simulate(steps=10)

    # Run defense
    guard = PeerGuard(env)
    guard.enforce_policies()

    # Run detection
    monitor = BehaviorMonitor(env)
    monitor.run_detection()

    # Visualize results
    visualize_message_flow(env.get_message_log())

if __name__ == "__main__":
    run_trust_exploitation_scenario()
